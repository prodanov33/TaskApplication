openapi: 3.0.1
info:
  title: Task API
  description: API for managing tasks
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
paths:
  /auth:
    post:
      summary: Authenticate user
      operationId: authenticateUser
      parameters:
        - name: authType
          in: query
          required: true
          schema:
            type: string
            enum: [ADMIN, USER]
      responses:
        '200':
          description: Authentication successful
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks:
    post:
      summary: Create a new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    get:
      summary: Get a list of tasks
      operationId: getTasks
      parameters:
        - name: filter
          in: query
          schema:
            type: string
            enum: [PRIORITY, DUE_DATE]
        - name: value
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
            enum: [PRIORITY, DUE_DATE]
            default: PRIORITY
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /tasks/{id}:
    get:
      summary: Get a task by ID
      operationId: getTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    put:
      summary: Update a task
      operationId: updateTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: Delete a task
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date
        priority:
          type: string
          enum: [HIGH, MEDIUM, LOW]
        isCompleted:
          type: boolean
    CreateTaskRequest:
      type: object
      required: [title, description, dueDate, priority]
      properties:
        title:
          type: string
          minLength: 3
        description:
          type: string
          minLength: 3
        dueDate:
          type: string
          format: date
        isCritical:
          type: boolean
    UpdateTaskRequest:
      type: object
      required: [title, description, dueDate]
      properties:
        title:
          type: string
          minLength: 3
        description:
          type: string
          minLength: 3
        dueDate:
          type: string
          format: date
        isCompleted:
          type: boolean
        isCritical:
          type: boolean
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        details:
          type: string
